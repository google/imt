// Generated by rstantools.  Do not edit by hand.

/*
    im is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    im is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with im.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_hurdlelognormal_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 122> locations_array__ =
  {" (found before start of program)",
  " (in 'hurdlelognormal', line 69, column 2 to column 18)",
  " (in 'hurdlelognormal', line 70, column 2 to column 22)",
  " (in 'hurdlelognormal', line 71, column 2 to column 16)",
  " (in 'hurdlelognormal', line 73, column 2 to column 19)",
  " (in 'hurdlelognormal', line 74, column 2 to column 23)",
  " (in 'hurdlelognormal', line 75, column 2 to column 17)",
  " (in 'hurdlelognormal', line 76, column 2 to column 28)",
  " (in 'hurdlelognormal', line 106, column 2 to column 19)",
  " (in 'hurdlelognormal', line 107, column 2 to column 15)",
  " (in 'hurdlelognormal', line 108, column 2 to column 15)",
  " (in 'hurdlelognormal', line 109, column 2 to column 11)",
  " (in 'hurdlelognormal', line 110, column 2 to column 21)",
  " (in 'hurdlelognormal', line 111, column 2 to column 35)",
  " (in 'hurdlelognormal', line 112, column 2 to column 35)",
  " (in 'hurdlelognormal', line 115, column 4 to column 58)",
  " (in 'hurdlelognormal', line 116, column 4 to column 48)",
  " (in 'hurdlelognormal', line 117, column 4 to column 58)",
  " (in 'hurdlelognormal', line 118, column 4 to column 45)",
  " (in 'hurdlelognormal', line 123, column 6 to column 110)",
  " (in 'hurdlelognormal', line 122, column 11 to line 124, column 5)",
  " (in 'hurdlelognormal', line 121, column 6 to column 20)",
  " (in 'hurdlelognormal', line 120, column 74 to line 122, column 5)",
  " (in 'hurdlelognormal', line 120, column 4 to line 124, column 5)",
  " (in 'hurdlelognormal', line 129, column 6 to column 79)",
  " (in 'hurdlelognormal', line 128, column 11 to line 130, column 5)",
  " (in 'hurdlelognormal', line 127, column 6 to column 16)",
  " (in 'hurdlelognormal', line 126, column 48 to line 128, column 5)",
  " (in 'hurdlelognormal', line 126, column 4 to line 130, column 5)",
  " (in 'hurdlelognormal', line 134, column 6 to column 79)",
  " (in 'hurdlelognormal', line 133, column 11 to line 135, column 5)",
  " (in 'hurdlelognormal', line 132, column 6 to column 16)",
  " (in 'hurdlelognormal', line 131, column 48 to line 133, column 5)",
  " (in 'hurdlelognormal', line 131, column 4 to line 135, column 5)",
  " (in 'hurdlelognormal', line 137, column 4 to column 51)",
  " (in 'hurdlelognormal', line 138, column 4 to column 51)",
  " (in 'hurdlelognormal', line 113, column 17 to line 139, column 3)",
  " (in 'hurdlelognormal', line 113, column 2 to line 139, column 3)",
  " (in 'hurdlelognormal', line 140, column 2 to column 22)",
  " (in 'hurdlelognormal', line 141, column 2 to column 48)",
  " (in 'hurdlelognormal', line 79, column 9 to column 10)",
  " (in 'hurdlelognormal', line 79, column 2 to column 23)",
  " (in 'hurdlelognormal', line 80, column 9 to column 10)",
  " (in 'hurdlelognormal', line 80, column 2 to column 21)",
  " (in 'hurdlelognormal', line 82, column 2 to column 56)",
  " (in 'hurdlelognormal', line 83, column 2 to column 53)",
  " (in 'hurdlelognormal', line 84, column 2 to column 50)",
  " (in 'hurdlelognormal', line 86, column 2 to column 38)",
  " (in 'hurdlelognormal', line 87, column 2 to column 30)",
  " (in 'hurdlelognormal', line 88, column 2 to column 42)",
  " (in 'hurdlelognormal', line 89, column 2 to column 31)",
  " (in 'hurdlelognormal', line 91, column 2 to column 80)",
  " (in 'hurdlelognormal', line 92, column 2 to column 81)",
  " (in 'hurdlelognormal', line 99, column 8 to column 58)",
  " (in 'hurdlelognormal', line 100, column 8 to column 93)",
  " (in 'hurdlelognormal', line 98, column 13 to line 101, column 7)",
  " (in 'hurdlelognormal', line 97, column 8 to column 58)",
  " (in 'hurdlelognormal', line 96, column 21 to line 98, column 7)",
  " (in 'hurdlelognormal', line 96, column 6 to line 101, column 7)",
  " (in 'hurdlelognormal', line 95, column 19 to line 102, column 5)",
  " (in 'hurdlelognormal', line 95, column 4 to line 102, column 5)",
  " (in 'hurdlelognormal', line 93, column 25 to line 103, column 3)",
  " (in 'hurdlelognormal', line 93, column 2 to line 103, column 3)",
  " (in 'hurdlelognormal', line 15, column 2 to column 17)",
  " (in 'hurdlelognormal', line 16, column 34 to column 35)",
  " (in 'hurdlelognormal', line 16, column 2 to column 37)",
  " (in 'hurdlelognormal', line 17, column 2 to column 17)",
  " (in 'hurdlelognormal', line 19, column 9 to column 10)",
  " (in 'hurdlelognormal', line 19, column 12 to column 13)",
  " (in 'hurdlelognormal', line 19, column 2 to column 17)",
  " (in 'hurdlelognormal', line 20, column 18 to column 19)",
  " (in 'hurdlelognormal', line 20, column 2 to column 23)",
  " (in 'hurdlelognormal', line 22, column 2 to column 24)",
  " (in 'hurdlelognormal', line 23, column 2 to column 31)",
  " (in 'hurdlelognormal', line 24, column 9 to column 10)",
  " (in 'hurdlelognormal', line 24, column 2 to column 28)",
  " (in 'hurdlelognormal', line 25, column 18 to column 19)",
  " (in 'hurdlelognormal', line 25, column 2 to column 35)",
  " (in 'hurdlelognormal', line 26, column 2 to column 22)",
  " (in 'hurdlelognormal', line 27, column 2 to column 29)",
  " (in 'hurdlelognormal', line 28, column 2 to column 16)",
  " (in 'hurdlelognormal', line 29, column 2 to column 26)",
  " (in 'hurdlelognormal', line 31, column 2 to column 39)",
  " (in 'hurdlelognormal', line 34, column 9 to column 10)",
  " (in 'hurdlelognormal', line 34, column 12 to column 13)",
  " (in 'hurdlelognormal', line 34, column 2 to column 21)",
  " (in 'hurdlelognormal', line 35, column 2 to column 17)",
  " (in 'hurdlelognormal', line 36, column 9 to column 10)",
  " (in 'hurdlelognormal', line 36, column 2 to column 18)",
  " (in 'hurdlelognormal', line 37, column 2 to column 18)",
  " (in 'hurdlelognormal', line 38, column 2 to column 16)",
  " (in 'hurdlelognormal', line 41, column 4 to column 54)",
  " (in 'hurdlelognormal', line 40, column 17 to line 42, column 3)",
  " (in 'hurdlelognormal', line 40, column 2 to line 42, column 3)",
  " (in 'hurdlelognormal', line 44, column 2 to column 17)",
  " (in 'hurdlelognormal', line 50, column 6 to column 37)",
  " (in 'hurdlelognormal', line 49, column 11 to line 51, column 5)",
  " (in 'hurdlelognormal', line 47, column 6 to column 22)",
  " (in 'hurdlelognormal', line 48, column 6 to column 27)",
  " (in 'hurdlelognormal', line 46, column 18 to line 49, column 5)",
  " (in 'hurdlelognormal', line 46, column 4 to line 51, column 5)",
  " (in 'hurdlelognormal', line 45, column 17 to line 52, column 3)",
  " (in 'hurdlelognormal', line 45, column 2 to line 52, column 3)",
  " (in 'hurdlelognormal', line 55, column 11 to column 21)",
  " (in 'hurdlelognormal', line 55, column 4 to column 38)",
  " (in 'hurdlelognormal', line 56, column 4 to column 22)",
  " (in 'hurdlelognormal', line 59, column 8 to column 45)",
  " (in 'hurdlelognormal', line 60, column 8 to column 23)",
  " (in 'hurdlelognormal', line 58, column 20 to line 61, column 7)",
  " (in 'hurdlelognormal', line 58, column 6 to line 61, column 7)",
  " (in 'hurdlelognormal', line 57, column 19 to line 62, column 5)",
  " (in 'hurdlelognormal', line 57, column 4 to line 62, column 5)",
  " (in 'hurdlelognormal', line 63, column 4 to column 38)",
  " (in 'hurdlelognormal', line 64, column 4 to column 34)",
  " (in 'hurdlelognormal', line 54, column 2 to line 65, column 3)",
  " (in 'hurdlelognormal', line 70, column 9 to column 10)",
  " (in 'hurdlelognormal', line 74, column 9 to column 10)",
  " (in 'hurdlelognormal', line 106, column 9 to column 10)",
  " (in 'hurdlelognormal', line 107, column 9 to column 10)",
  " (in 'hurdlelognormal', line 108, column 9 to column 10)",
  " (in 'hurdlelognormal', line 111, column 32 to column 33)",
  " (in 'hurdlelognormal', line 112, column 32 to column 33)"};
#include <stan_meta_header.hpp>
class model_hurdlelognormal final : public model_base_crtp<model_hurdlelognormal> {
private:
  int N;
  std::vector<int> treatment;
  int K;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  double mean_alpha_logit;
  double sd_alpha_logit;
  Eigen::Matrix<double,-1,1> mean_beta_logit_data__;
  Eigen::Matrix<double,-1,1> sd_beta_logit_data__;
  double tau_mean_logit;
  double tau_sd_logit;
  double mean_tau;
  double sigma_tau;
  int run_estimation;
  Eigen::Matrix<double,-1,-1> X_std_data__;
  int N_positive;
  Eigen::Matrix<double,-1,1> log_y_data__;
  double log_y_mean;
  double log_y_sd;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_beta_logit{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sd_beta_logit{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_std{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> log_y{nullptr, 0};
public:
  ~model_hurdlelognormal() {}
  model_hurdlelognormal(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_hurdlelognormal_namespace::model_hurdlelognormal";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 63;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 63;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("treatment", "N", N);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "treatment", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      treatment = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 65;
      treatment = context__.vals_i("treatment");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "treatment", treatment,
        0);
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "treatment", treatment, 1);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 66;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 69;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 69;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 69;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 71;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 71;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 71;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 71;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "mean_alpha_logit",
        "double", std::vector<size_t>{});
      mean_alpha_logit = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 72;
      mean_alpha_logit = context__.vals_r("mean_alpha_logit")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization", "sd_alpha_logit",
        "double", std::vector<size_t>{});
      sd_alpha_logit = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 73;
      sd_alpha_logit = context__.vals_r("sd_alpha_logit")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "sd_alpha_logit",
        sd_alpha_logit, 0);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("mean_beta_logit", "K", K);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "mean_beta_logit",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      mean_beta_logit_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&mean_beta_logit)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_beta_logit_data__.data(),
        K);
      {
        std::vector<local_scalar_t__> mean_beta_logit_flat__;
        current_statement__ = 75;
        mean_beta_logit_flat__ = context__.vals_r("mean_beta_logit");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 75;
          stan::model::assign(mean_beta_logit, mean_beta_logit_flat__[(pos__
            - 1)], "assigning variable mean_beta_logit",
            stan::model::index_uni(sym1__));
          current_statement__ = 75;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 76;
      stan::math::validate_non_negative_index("sd_beta_logit", "K", K);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "sd_beta_logit",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      sd_beta_logit_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                               std::numeric_limits<double>::quiet_NaN());
      new (&sd_beta_logit)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sd_beta_logit_data__.data(),
        K);
      {
        std::vector<local_scalar_t__> sd_beta_logit_flat__;
        current_statement__ = 77;
        sd_beta_logit_flat__ = context__.vals_r("sd_beta_logit");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 77;
          stan::model::assign(sd_beta_logit, sd_beta_logit_flat__[(pos__ -
            1)], "assigning variable sd_beta_logit",
            stan::model::index_uni(sym1__));
          current_statement__ = 77;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "sd_beta_logit",
        sd_beta_logit, 0);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "tau_mean_logit",
        "double", std::vector<size_t>{});
      tau_mean_logit = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 78;
      tau_mean_logit = context__.vals_r("tau_mean_logit")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization", "tau_sd_logit",
        "double", std::vector<size_t>{});
      tau_sd_logit = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 79;
      tau_sd_logit = context__.vals_r("tau_sd_logit")[(1 - 1)];
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "tau_sd_logit",
        tau_sd_logit, 0);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "mean_tau", "double",
        std::vector<size_t>{});
      mean_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 80;
      mean_tau = context__.vals_r("mean_tau")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization", "sigma_tau", "double",
        std::vector<size_t>{});
      sigma_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 81;
      sigma_tau = context__.vals_r("sigma_tau")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "sigma_tau", sigma_tau,
        0);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "run_estimation", "int",
        std::vector<size_t>{});
      run_estimation = std::numeric_limits<int>::min();
      current_statement__ = 82;
      run_estimation = context__.vals_i("run_estimation")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "run_estimation",
        run_estimation, 0);
      current_statement__ = 82;
      stan::math::check_less_or_equal(function__, "run_estimation",
        run_estimation, 1);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("X_std", "N", N);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("X_std", "K", K);
      current_statement__ = 85;
      X_std_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_std)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_std_data__.data(), N, K);
      current_statement__ = 86;
      N_positive = std::numeric_limits<int>::min();
      current_statement__ = 87;
      stan::math::validate_non_negative_index("log_y", "N", N);
      current_statement__ = 88;
      log_y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&log_y)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(log_y_data__.data(), N);
      current_statement__ = 89;
      log_y_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 90;
      log_y_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 93;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 91;
        stan::model::assign(X_std,
          stan::math::divide(
            stan::math::subtract(
              stan::model::rvalue(X, "X", stan::model::index_omni(),
                stan::model::index_uni(k)),
              stan::math::mean(
                stan::model::rvalue(X, "X", stan::model::index_omni(),
                  stan::model::index_uni(k)))),
            stan::math::sd(
              stan::model::rvalue(X, "X", stan::model::index_omni(),
                stan::model::index_uni(k)))), "assigning variable X_std",
          stan::model::index_omni(), stan::model::index_uni(k));
      }
      current_statement__ = 94;
      N_positive = 0;
      current_statement__ = 102;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 100;
        if (stan::math::logical_gt(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0)) {
          current_statement__ = 97;
          N_positive = (N_positive + 1);
          current_statement__ = 98;
          stan::model::assign(log_y,
            stan::math::log(
              stan::model::rvalue(y, "y", stan::model::index_uni(n))),
            "assigning variable log_y", stan::model::index_uni(n));
        } else {
          current_statement__ = 95;
          stan::model::assign(log_y, stan::math::negative_infinity(),
            "assigning variable log_y", stan::model::index_uni(n));
        }
      }
      {
        current_statement__ = 103;
        stan::math::validate_non_negative_index("positive_log_y",
          "N_positive", N_positive);
        Eigen::Matrix<double,-1,1> positive_log_y =
          Eigen::Matrix<double,-1,1>::Constant(N_positive,
            std::numeric_limits<double>::quiet_NaN());
        int pos_index = std::numeric_limits<int>::min();
        current_statement__ = 105;
        pos_index = 1;
        current_statement__ = 111;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 109;
          if (stan::math::logical_gt(
                stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0)) {
            current_statement__ = 106;
            stan::model::assign(positive_log_y,
              stan::model::rvalue(log_y, "log_y", stan::model::index_uni(n)),
              "assigning variable positive_log_y",
              stan::model::index_uni(pos_index));
            current_statement__ = 107;
            pos_index = (pos_index + 1);
          }
        }
        current_statement__ = 112;
        log_y_mean = stan::math::mean(positive_log_y);
        current_statement__ = 113;
        log_y_sd = stan::math::sd(positive_log_y);
      }
      current_statement__ = 115;
      stan::math::validate_non_negative_index("beta_zero", "K", K);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("beta_lnorm", "K", K);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("y_pred", "N", N);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("y0", "N", N);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("y1", "N", N);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("y0_zero", "N", N);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("y1_zero", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + K + 1 + 1 + K + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_hurdlelognormal";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_hurdlelognormal_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ alpha_zero = DUMMY_VAR__;
      current_statement__ = 1;
      alpha_zero = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta_zero =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      beta_zero = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ tau_zero = DUMMY_VAR__;
      current_statement__ = 3;
      tau_zero = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_lnorm = DUMMY_VAR__;
      current_statement__ = 4;
      alpha_lnorm = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta_lnorm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      beta_lnorm = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ tau_lnorm = DUMMY_VAR__;
      current_statement__ = 6;
      tau_lnorm = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_lnorm = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_lnorm = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      {
        current_statement__ = 40;
        stan::math::validate_non_negative_index("theta_zero", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> theta_zero =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 42;
        stan::math::validate_non_negative_index("mu_lnorm", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_lnorm =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_zero,
                         mean_alpha_logit, sd_alpha_logit));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_zero,
                         mean_beta_logit, sd_beta_logit));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(tau_zero,
                         tau_mean_logit, tau_sd_logit));
        current_statement__ = 47;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_lnorm,
                         log_y_mean, 1));
        current_statement__ = 48;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_lnorm, 0, 0.5));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(tau_lnorm, mean_tau,
                         sigma_tau));
        current_statement__ = 50;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_lnorm, 0, 0.5));
        current_statement__ = 51;
        stan::model::assign(theta_zero,
          stan::math::add(
            stan::math::add(alpha_zero,
              stan::math::multiply(X_std, beta_zero)),
            stan::math::multiply(tau_zero, stan::math::to_vector(treatment))),
          "assigning variable theta_zero");
        current_statement__ = 52;
        stan::model::assign(mu_lnorm,
          stan::math::add(
            stan::math::add(alpha_lnorm,
              stan::math::multiply(X_std, beta_lnorm)),
            stan::math::multiply(tau_lnorm, stan::math::to_vector(treatment))),
          "assigning variable mu_lnorm");
        current_statement__ = 62;
        if (stan::math::logical_eq(run_estimation, 1)) {
          current_statement__ = 60;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 58;
            if (stan::math::logical_eq(
                  stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0)) {
              current_statement__ = 56;
              lp_accum__.add(stan::math::bernoulli_logit_lpmf<false>(1,
                               stan::model::rvalue(theta_zero, "theta_zero",
                                 stan::model::index_uni(n))));
            } else {
              current_statement__ = 53;
              lp_accum__.add(stan::math::bernoulli_logit_lpmf<false>(0,
                               stan::model::rvalue(theta_zero, "theta_zero",
                                 stan::model::index_uni(n))));
              current_statement__ = 54;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               ((stan::model::rvalue(log_y, "log_y",
                                   stan::model::index_uni(n)) - log_y_mean) /
                               log_y_sd),
                               stan::model::rvalue(mu_lnorm, "mu_lnorm",
                                 stan::model::index_uni(n)), sigma_lnorm));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_hurdlelognormal_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double alpha_zero = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha_zero = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> beta_zero =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_zero = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double tau_zero = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      tau_zero = in__.template read<local_scalar_t__>();
      double alpha_lnorm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      alpha_lnorm = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> beta_lnorm =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      beta_lnorm = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double tau_lnorm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      tau_lnorm = in__.template read<local_scalar_t__>();
      double sigma_lnorm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma_lnorm = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      out__.write(alpha_zero);
      out__.write(beta_zero);
      out__.write(tau_zero);
      out__.write(alpha_lnorm);
      out__.write(beta_lnorm);
      out__.write(tau_lnorm);
      out__.write(sigma_lnorm);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> y_pred =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y0 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y1 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double ATE = std::numeric_limits<double>::quiet_NaN();
      double tau_prob_zero = std::numeric_limits<double>::quiet_NaN();
      std::vector<int> y0_zero =
        std::vector<int>(N, std::numeric_limits<int>::min());
      std::vector<int> y1_zero =
        std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 37;
      for (int n = 1; n <= N; ++n) {
        double theta_zero_0 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 15;
        theta_zero_0 = (alpha_zero +
          stan::math::multiply(
            stan::model::rvalue(X_std, "X_std", stan::model::index_uni(n)),
            beta_zero));
        double theta_zero_1 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 16;
        theta_zero_1 = (theta_zero_0 + tau_zero);
        double mu_lnorm_0 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 17;
        mu_lnorm_0 = (alpha_lnorm +
          stan::math::multiply(
            stan::model::rvalue(X_std, "X_std", stan::model::index_uni(n)),
            beta_lnorm));
        double mu_lnorm_1 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 18;
        mu_lnorm_1 = (mu_lnorm_0 + tau_lnorm);
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::math::bernoulli_logit_rng((theta_zero_0 + (tau_zero *
                stan::model::rvalue(treatment, "treatment",
                  stan::model::index_uni(n)))), base_rng__), 1)) {
          current_statement__ = 21;
          stan::model::assign(y_pred, 0, "assigning variable y_pred",
            stan::model::index_uni(n));
        } else {
          current_statement__ = 19;
          stan::model::assign(y_pred,
            stan::math::exp(
              ((stan::math::normal_rng((mu_lnorm_0 + (tau_lnorm *
                  stan::model::rvalue(treatment, "treatment",
                    stan::model::index_uni(n)))), sigma_lnorm, base_rng__) *
              log_y_sd) + log_y_mean)), "assigning variable y_pred",
            stan::model::index_uni(n));
        }
        current_statement__ = 28;
        if (stan::math::logical_eq(
              stan::math::bernoulli_logit_rng(theta_zero_0, base_rng__), 1)) {
          current_statement__ = 26;
          stan::model::assign(y0, 0, "assigning variable y0",
            stan::model::index_uni(n));
        } else {
          current_statement__ = 24;
          stan::model::assign(y0,
            stan::math::exp(
              ((stan::math::normal_rng(mu_lnorm_0, sigma_lnorm, base_rng__) *
              log_y_sd) + log_y_mean)), "assigning variable y0",
            stan::model::index_uni(n));
        }
        current_statement__ = 33;
        if (stan::math::logical_eq(
              stan::math::bernoulli_logit_rng(theta_zero_1, base_rng__), 1)) {
          current_statement__ = 31;
          stan::model::assign(y1, 0, "assigning variable y1",
            stan::model::index_uni(n));
        } else {
          current_statement__ = 29;
          stan::model::assign(y1,
            stan::math::exp(
              ((stan::math::normal_rng(mu_lnorm_1, sigma_lnorm, base_rng__) *
              log_y_sd) + log_y_mean)), "assigning variable y1",
            stan::model::index_uni(n));
        }
        current_statement__ = 34;
        stan::model::assign(y0_zero,
          stan::math::bernoulli_logit_rng(theta_zero_0, base_rng__),
          "assigning variable y0_zero", stan::model::index_uni(n));
        current_statement__ = 35;
        stan::model::assign(y1_zero,
          stan::math::bernoulli_logit_rng(theta_zero_1, base_rng__),
          "assigning variable y1_zero", stan::model::index_uni(n));
      }
      current_statement__ = 38;
      ATE = stan::math::mean(stan::math::subtract(y1, y0));
      current_statement__ = 39;
      tau_prob_zero = (stan::math::mean(
                         stan::math::promote_scalar<double>(y1_zero))
        - stan::math::mean(stan::math::promote_scalar<double>(y0_zero)));
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "y0_zero", y0_zero, 0);
      current_statement__ = 13;
      stan::math::check_less_or_equal(function__, "y0_zero", y0_zero, 1);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "y1_zero", y1_zero, 0);
      current_statement__ = 14;
      stan::math::check_less_or_equal(function__, "y1_zero", y1_zero, 1);
      out__.write(y_pred);
      out__.write(y0);
      out__.write(y1);
      out__.write(ATE);
      out__.write(tau_prob_zero);
      out__.write(y0_zero);
      out__.write(y1_zero);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha_zero = DUMMY_VAR__;
      current_statement__ = 1;
      alpha_zero = in__.read<local_scalar_t__>();
      out__.write(alpha_zero);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_zero =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_zero,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable beta_zero");
      out__.write(beta_zero);
      local_scalar_t__ tau_zero = DUMMY_VAR__;
      current_statement__ = 3;
      tau_zero = in__.read<local_scalar_t__>();
      out__.write(tau_zero);
      local_scalar_t__ alpha_lnorm = DUMMY_VAR__;
      current_statement__ = 4;
      alpha_lnorm = in__.read<local_scalar_t__>();
      out__.write(alpha_lnorm);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_lnorm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(beta_lnorm,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable beta_lnorm");
      out__.write(beta_lnorm);
      local_scalar_t__ tau_lnorm = DUMMY_VAR__;
      current_statement__ = 6;
      tau_lnorm = in__.read<local_scalar_t__>();
      out__.write(tau_lnorm);
      local_scalar_t__ sigma_lnorm = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_lnorm = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_lnorm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_zero",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_zero",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau_zero",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha_lnorm",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "beta_lnorm",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "tau_lnorm",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_lnorm",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha_zero = DUMMY_VAR__;
      current_statement__ = 1;
      alpha_zero = context__.vals_r("alpha_zero")[(1 - 1)];
      out__.write(alpha_zero);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_zero =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_zero_flat__;
        current_statement__ = 2;
        beta_zero_flat__ = context__.vals_r("beta_zero");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(beta_zero, beta_zero_flat__[(pos__ - 1)],
            "assigning variable beta_zero", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_zero);
      local_scalar_t__ tau_zero = DUMMY_VAR__;
      current_statement__ = 3;
      tau_zero = context__.vals_r("tau_zero")[(1 - 1)];
      out__.write(tau_zero);
      local_scalar_t__ alpha_lnorm = DUMMY_VAR__;
      current_statement__ = 4;
      alpha_lnorm = context__.vals_r("alpha_lnorm")[(1 - 1)];
      out__.write(alpha_lnorm);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_lnorm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_lnorm_flat__;
        current_statement__ = 5;
        beta_lnorm_flat__ = context__.vals_r("beta_lnorm");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(beta_lnorm, beta_lnorm_flat__[(pos__ - 1)],
            "assigning variable beta_lnorm", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_lnorm);
      local_scalar_t__ tau_lnorm = DUMMY_VAR__;
      current_statement__ = 6;
      tau_lnorm = context__.vals_r("tau_lnorm")[(1 - 1)];
      out__.write(tau_lnorm);
      local_scalar_t__ sigma_lnorm = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_lnorm = context__.vals_r("sigma_lnorm")[(1 - 1)];
      out__.write_free_lb(0, sigma_lnorm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_zero", "beta_zero", "tau_zero",
                "alpha_lnorm", "beta_lnorm", "tau_lnorm", "sigma_lnorm"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"y_pred", "y0", "y1", "ATE", "tau_prob_zero", "y0_zero",
             "y1_zero"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha_zero");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_zero" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_zero");
    param_names__.emplace_back(std::string() + "alpha_lnorm");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_lnorm" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_lnorm");
    param_names__.emplace_back(std::string() + "sigma_lnorm");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "ATE");
      param_names__.emplace_back(std::string() + "tau_prob_zero");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y0_zero" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1_zero" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha_zero");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_zero" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_zero");
    param_names__.emplace_back(std::string() + "alpha_lnorm");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_lnorm" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_lnorm");
    param_names__.emplace_back(std::string() + "sigma_lnorm");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "ATE");
      param_names__.emplace_back(std::string() + "tau_prob_zero");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y0_zero" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1_zero" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_zero\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_zero\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_lnorm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"ATE\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_prob_zero\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y0_zero\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_zero\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_zero\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_zero\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_lnorm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_lnorm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"ATE\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_prob_zero\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y0_zero\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_zero\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + K) + 1) + 1) + K) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((((((N +
      N) + N) + 1) + 1) + N) + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + K) + 1) + 1) + K) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((((((N +
      N) + N) + 1) + 1) + N) + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_hurdlelognormal_namespace::model_hurdlelognormal;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_hurdlelognormal_namespace::profiles__;
}
#endif
#endif
